#!/usr/bin/env python
#Filename: rsaKeyPairGenerator_rev.01022017a.py
#Author: Rod Chubb

#Purpose: This script generates RSA Key Pairs.

#Description: This script generates RSA Key Pairs. The "secret" is randomly 
#generated by the secret_generator function and each pair will have a unique
#"secret". This secret is saved in a file.                                                              
#                                                                                                   
#Script usage is "python rsaKeyPairGenerator_rev.12242016b.py 5". This usage will                   
#produce 5 different pairs using the same hardcoded "secret".                                       


#Imports
import argparse
import datetime
import os
import random
import string
from Crypto.PublicKey import RSA


#Functions
def current_date_time():
    current_date_time_object = datetime.datetime.now()
    current_date_time_string = current_date_time_object.strftime("%m%d%Y%H%M%S")
    return current_date_time_string

def secret_generator(size=15, chars=string.ascii_letters + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))


#Command Line
parser = argparse.ArgumentParser(description='This script generates an "n" number of RSA key pairs. EX.rsaKeyPairGenerator.py 5')
parser.add_argument("count", nargs=1,
                    help='The only command line argument accepted is the number of RSA key pairs to generate. This argument must be provided.')

args = parser.parse_args()


#Constants
count_argument = args.count #This creates a list, the list item needs to be converted to a string
number_of_keys_to_generate = int(count_argument[0])
private_key_filename_base = "rsa_private_key.key"
public_key_filename_base = "rsa_public_key.pem"
secret_filename_base = "rsa_secret.txt"


#Script
for i in range(number_of_keys_to_generate):
    secret = secret_generator()
    key = RSA.generate(2048)
    private_key_filename_entire = current_date_time() + "_" + private_key_filename_base
    public_key_filename_entire = current_date_time() + "_" + public_key_filename_base
    secret_filename_entire = current_date_time() + "_" + secret_filename_base

    encrypted_key = key.exportKey(passphrase=secret, pkcs=8, protection="scryptAndAES128-CBC")

    private_key_file = open(private_key_filename_entire, "wb")
    private_key_file.write(encrypted_key)

    public_key_file = open(public_key_filename_entire, "wb")
    public_key_file.write(key.publickey().exportKey())

    secret_file = open(secret_filename_entire, "wb")
    secret_file.write(secret)
